name: leetcode

on:
  push:
    branches:
      - master

jobs:
  unit-test:
    name: 'unit test'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    env:
      VCPKG_ROOT: '${{ github.workspace }}/vcpkg'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Get cmake
        # Install latest CMake.
        uses: lukka/get-cmake@latest
      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v2
        id: vcpkg-cache
        with:
          # The first path is where vcpkg generates artifacts while consuming the vcpkg.json manifest file.
          # The second path is the location of vcpkg (it contains the vcpkg executable and data files).
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env.VCPKG_ROOT }}
            ${{ github.workspace }}/build/vcpkg_installed
            !${{ env.VCPKG_ROOT }}/.git
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
          # The key is composed in a way that it gets properly invalidated: this must happen whenever vcpkg's Git commit id changes, or the list of packages changes. In this case a cache miss must happen and a new entry with a new key with be pushed to GitHub the cache service.
          # The key includes: hash of the vcpkg.json file, the hash of the vcpkg Git commit id, and the used vcpkg's triplet. The vcpkg's commit id would suffice, but computing an hash out it does not harm.
          # Note: given a key, the cache content is immutable. If a cache entry has been created improperly, in order the recreate the right content the key must be changed as well, and it must be brand new (i.e. not existing already).
          key: |
            ${{ hashFiles( 'vcpkg.json' ) }}-${{ runner.os }}-cache-key-v1
      - name: Get vcpkg(Linux)
        if: ${{ runner.os == 'Linux' && steps.vcpkg-cache.outputs.cache-hit != 'true' }}
        run: |
          cd ${{ github.workspace }}
          mkdir -p build
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh
      - name: install deps and remove vcpkg(Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt install -y libgl1-mesa-dev libglu1-mesa-dev xorg-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev
          sudo rm -rf "$VCPKG_INSTALLATION_ROOT"
        shell: bash
      - name: install lcov
        if: runner.os == 'Linux'
        run: |
          sudo apt install -y lcov
      - name: Running cmake
        run: |
          cd ${{ github.workspace }}
          cd build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Release
      - name: Build Solution
        run: |
          cd build
          make
          cmake --build . --target check
      - name: Report code coverage
        uses: zgosalvez/github-actions-report-lcov@v1
        with:
          coverage-files: build/tests/coverage.info
          minimum-coverage: 90
          artifact-name: code-coverage-report
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: build/tests/coverage.info
          flags: unittests # optional
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
